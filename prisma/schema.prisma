// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetToken {
    id      String   @id @default(cuid())
    token   String   @unique
    userId  String
    expires DateTime
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role?        @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId        Int?         @default(1)
    password      String?
    ResetToken    ResetToken[]
    orders        Orden[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Role {
    id          Int    @id
    name        String @unique
    description String
    users       User[]
}

model PrecioPrenda {
    id            String                @id @default(cuid())
    precioBase    Float
    tipo          TipoPrenda            @relation(fields: [tipoId], references: [id], onDelete: Cascade)
    tipoId        String
    complejidad   ComplejidadConfeccion @relation(fields: [complejidadId], references: [id], onDelete: Cascade)
    complejidadId String
    ordenes       Orden[]
}

model TipoPrenda {
    id      String         @id @default(cuid())
    name    String         @unique
    picture String
    precios PrecioPrenda[]
}

model ComplejidadConfeccion {
    id          String         @id @default(cuid())
    name        String         @unique
    description String
    prendas     PrecioPrenda[]
}

model PrecioDelDolar {
    id         String   @id @default(cuid())
    precio     Float
    fechaDesde DateTime @default(now())
    fechaHasta DateTime @default(now())
}

model Orden {
    id               String            @id @default(cuid())
    prenda           PrecioPrenda      @relation(fields: [idPrenda], references: [id], onDelete: Cascade)
    idPrenda         String
    nombre           String?
    cantidad         Int?
    idEstado         Int?
    estado           EstadoOrden?      @relation(fields: [idEstado], references: [id], onDelete: Cascade)
    user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           String?
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @default(now())
    expiresAt        DateTime          @default(now())
    servicios        Servicio[]
    archivos         Archivo[]
    cotizacionOrden  CotizacionOrden[]
    detallesPrenda   DetallesPrenda?
    idDetallesPrenda String?
}

model CotizacionOrden {
    id        String   @id @default(cuid())
    orden     Orden    @relation(fields: [idOrden], references: [id], onDelete: Cascade)
    idOrden   String
    precio    Float
    createdAt DateTime @default(now())
}

model EstadoOrden {
    id      Int     @id @default(autoincrement())
    nombre  String
    ordenes Orden[]
}

model Servicio {
    id                  String  @id @default(cuid())
    name                String  @unique
    description         String
    precioFijo          Float   @default(0)
    factorMultiplicador Float   @default(0)
    ordenes             Orden[]
}

model Archivo {
    id          String  @id @default(cuid())
    name        String
    observacion String?
    urlID       String
    type        String
    Orden       Orden   @relation(fields: [ordenId], references: [id], onDelete: Cascade)
    ordenId     String
}

model DetallesPrenda {
    id        String           @id @default(cuid())
    atributos AtributoPrenda[]
    orden     Orden            @relation(fields: [ordenId], references: [id], onDelete: Cascade)
    ordenId   String           @unique
}

model AtributoPrenda {
    id               String         @id @default(cuid())
    name             String
    cantidad         Int?
    observacion      String?
    DetallesPrenda   DetallesPrenda @relation(fields: [detallesPrendaId], references: [id])
    detallesPrendaId String
}
