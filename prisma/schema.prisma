// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetToken {
    id      String   @id @default(cuid())
    token   String   @unique
    userId  String
    expires DateTime
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role?        @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId        String?      @default("cl79gksfz0015nrvhrqpdy8ya")
    password      String?
    ResetToken    ResetToken[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    description String
    users       User[]
}

model ClothesCategory {
    id        String      @id @default(cuid())
    name      String      @unique
    picture   String
    Categoria Categoria[]
}

model Complexity {
    id          String      @id @default(cuid())
    name        String      @unique
    description String
    Categoria   Categoria[]
}

model Categoria {
    id              String          @id @default(cuid())
    idCC            String
    idComplexity    String
    complexity      Complexity      @relation(fields: [idComplexity], references: [id])
    clothesCategory ClothesCategory @relation(fields: [idCC], references: [id])
    //orden Orden?

    nombre          String
    precioEnDolares Float
}

model Corte {
    id             String @id @default(cuid())
    nombre         String
    cantidadMin    Int
    cantidadMax    Int
    factorDeAjuste Float
}

model Confeccion {
    id             String @id @default(cuid())
    cantidadMin    Int
    cantidadMax    Int
    factorDeAjuste Float
}

model Servicios {
    id                  String @id @default(cuid())
    nombre              String
    factorDeAjusteMolde Float
    factorDeAjusteAvio  Float
    servicioPorOrden ServicioPorOrden[]
}

model PrecioDelDolar {
    id         String   @id @default(cuid())
    precio     Float
    fechaDesde DateTime
    fechaHasta DateTime
}

model Orden {
    id String @id @default(cuid())
    idCategoria String @unique
    //categoria Categoria @relation(fields: [idCategoria], references: [id]) 
    nombre String
    cantidad Int
    idEstado Int @unique
    estado Estado @relation(fields: [idEstado] ,references: [id])
    //Deberia ser una relacion OneToMany con model User pero borraria toda la base de User mepa :(
    idUsuario String
    servicioPorOrden ServicioPorOrden[]
}

model Estado {
    id Int @id @default(autoincrement())
    nombre String
    orden Orden?
}

model ServicioPorOrden {
    id Int @id @default(autoincrement())
    idOrden String
    orden Orden @relation(fields: [idOrden],references: [id])
    idServicio String 
    servicio Servicios @relation(fields: [idServicio],references: [id])
    archivo String
    observaciones String
}